{"version":3,"sources":["utils/getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","Object","asyncToGenerator","regenerator_default","a","mark","_callee","web3","_web","provider","_web2","wrap","_context","prev","next","ethereum","Web3","enable","t0","console","log","providers","HttpProvider","stop","this","App","state","storageValue","accounts","contract","loading","componentDidMount","networkId","deployedNetwork","instance","id","sent","eth","getAccounts","net","getId","SimpleStorageContract","networks","Contract","abi","address","location","pathname","length","replace","methods","getLink","call","then","response","_this2","setState","listenEvent","alert","error","submit","_this2$state","createNewLink","url","send","from","updateUrl","e","target","value","_callee2","_this","_context2","assertThisInitialized","events","LinkAdded","getLastLink","short_url","href","toNumber","react_default","createElement","className","Fragment","name","val","onChange","onClick","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b5f1cce6.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:7545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/LinkShortner.json\";\nimport getWeb3 from \"./utils/getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { storageValue: 0, web3: null, accounts: null, contract: null, loading: true };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n      if(window.location.pathname.length > 1){\n        const id = window.location.pathname.replace(\"/\", \"\")\n        instance.methods.getLink(id).call().then((response) => {\n          window.location = \"http://\" + response[1]\n        })\n      }else{\n        this.setState({loading: false})\n      }\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.listenEvent);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n  submit = () => {\n    const { accounts, contract } = this.state;\n    contract.methods.createNewLink(this.state.url).send({ from: accounts[0] })\n  }\n\n  updateUrl = (e) => {\n    this.setState({url: e.target.value})\n  }\n\n  listenEvent = async () => {\n    const { contract } = this.state;\n    const _this = this\n    contract.events.LinkAdded({}, function(){\n      contract.methods.getLastLink().call().then((response) => {\n        _this.setState({short_url: window.location.href + response[2].toNumber()})\n      })\n    })\n\n\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        {\n          !this.state.loading &&\n          <>\n            <h1>Link Shortner</h1>\n            <p>Build on Blockchain using Smart Contract.</p>\n            <h3>Enter url</h3>\n            <p>\n              <input name=\"url\" val={this.state.url} onChange={this.updateUrl}/>\n            </p>\n            <button onClick={this.submit}>Submit</button>\n            {\n              this.state.short_url &&\n              <p>\n                Short url is <a href={this.state.short_url} target=\"_blank\" > {this.state.short_url} </a>\n              </p>\n            }\n\n          </>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}